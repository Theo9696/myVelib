package myVelib;

import java.util.Scanner;

public class Playground {
	
	public static void main(String[] args)  throws AskPlanningRideImpossibleException, StationOfflineException, StationEmptyException, StationFullException {
		Simulation simu = new Simulation(5,3,50);
		System.out.println(simu);
		newUser(simu, new User("Paul",0, new WithoutSubscription(),15,35));
		
		newRide(simu,0, 17, 53, "Electrical", new FastestPath());		
		System.out.println(simu);
		takeABicycle(simu, 0, 0, "Electrical", 50);
		System.out.println(simu);
		returnABicycle(simu, 0, 3, 52.5);		
		System.out.println(simu);
		
		
		
		/*		
		ComputingRide computingRide = new ComputingRide(mika, stations, 10, 10);
		System.out.println(computingRide);
		System.out.println(computingRide.computeWay());
		*/
	}
	
	public static void newRide(Simulation simu, int userID, double latitude, double longitude, String bicycleType, RidePreferences pref) throws AskPlanningRideImpossibleException {
		try {
			simu.askNewRide(simu.getUsers().get(userID), latitude, longitude, bicycleType, pref);
		} catch (IndexOutOfBoundsException e) {
			System.err.println(e);
			System.err.println("You tried to enter a user ID that is not yet registered in the simulation");
		}
	}
	
	public static void newUser(Simulation simu, User user) {
		simu.addnewUser(user);
	}
	
	public static void takeABicycle(Simulation simu,int userID, int stationID, String bicycleType, double timeBicycleTaken) throws StationOfflineException, StationEmptyException {
		try {
			if (simu.getStations().get(stationID).hasStationBicycle(bicycleType)) {
				Bicycle b = simu.getStations().get(stationID).needBicycle(bicycleType);
				simu.getUsers().get(userID).getActualRide().addBicycle(b, timeBicycleTaken);
			} else {
				System.out.println("This station doesn't have the type of bicycle you wish !");
			}
		}
		catch (NullPointerException e) {
			System.err.println("This station or this user is not registered in this simulation");
			
		}
	}
	
	public static void returnABicycle(Simulation simu,int userID, int stationID, double timeBicycleGaveBack) throws StationOfflineException, StationFullException {
		try {
			Station stationTargeted = simu.getStations().get(stationID);
			try {
				User user = simu.getUsers().get(userID);
				try {
					PlanningRide RideTargeted = user.getActualRide();
					System.out.println(RideTargeted);
					try {
						stationTargeted.returnBicycle(RideTargeted.getBicycle()); 
					}
					catch (NullPointerException e) {
						System.err.println("Are you on a ride right now???");
					}
				}
				catch (NullPointerException e) {
					System.err.println("You don't ask for a right, do you?");
				}
			} catch (NullPointerException e) {
				System.err.println("This user doesn't exist !");
			}
			simu.getUsers().get(userID).completeARide(timeBicycleGaveBack);
		}
		catch (StationOfflineException e) {
			System.err.println("This station is offline, you can't park your bicycle there ! ");
		} catch (StationFullException e) {
			System.err.println("This station is full, you can't park your bicycle there !");
		} catch (NullPointerException e) {
			System.err.println("This station is not registered !");
		}
			
	}
}
