package myVelib;

import java.util.ArrayList;

public class Station {
	
	ArrayList<ParkingSlot> parkingslot = new ArrayList<ParkingSlot>();
	ArrayList<ParkingSlot> freeparkingslot = new ArrayList<ParkingSlot>();
	ArrayList<ParkingSlot> occupiedparkingslot = new ArrayList<ParkingSlot>();
	private boolean inorder;
	
	Station(){
		this.inorder = true;
	}
	
	Station(ArrayList<ParkingSlot> parkingslot){
		this.parkingslot = parkingslot;
		this.inorder = true;
		
		//initialisation of the free parkingslot list by testing each parkingslot of the station
		for (ParkingSlot p : parkingslot) {
			if (p.isFree())
				freeparkingslot.add(p);
			else
				occupiedparkingslot.add(p);
				
		}
	}
	
	public static void main(String[] args) {
		Bicycle b = new ElectricalBicycle();
		Bicycle b2 = new ElectricalBicycle();
		Bicycle b3 = new MechanicalBicycle();
		Bicycle b4 = new ElectricalBicycle();
		System.out.println(b);
		System.out.println(b2);
		System.out.println(b3);
		System.out.println(b4);
		ParkingSlot p1 = new ParkingSlot();
		ParkingSlot p2 = new ParkingSlot();
		System.out.println(p1);
		System.out.println(p2);
		p1.addBicycle(b);
		System.out.println(p1);
		p1.addBicycle(b4);
		System.out.println(p1);
		p2.addBicycle(b3);
		System.out.println(p2);
		p1.removeBicycle();
		System.out.println(p1);
		ArrayList<ParkingSlot> parkingslot = new ArrayList<ParkingSlot>();
		
		parkingslot.add(p1);
		parkingslot.add(p2);
		
		
		Station station = new Station(parkingslot);
		System.out.println(station);
		station.needBicycle();
		System.out.println(station);
		station.needBicycle();
		System.out.println(station);
	}
	
	public void slotisfree(ParkingSlot p) {
		if (!freeparkingslot.contains(p)) {
			freeparkingslot.add(p);
			occupiedparkingslot.remove(p);
		}
	}
		
	public void slotisoccupied(ParkingSlot p) {
		if (!occupiedparkingslot.contains(p)) {
			occupiedparkingslot.add(p);
			freeparkingslot.remove(p);
		}
		
	}
	public Bicycle needBicycle() {
		boolean igotabicycle = false;
		int n = 0;
		while (!igotabicycle && n < occupiedparkingslot.size()) {
			if (occupiedparkingslot.get(n).isUsable()) {
				Bicycle b = occupiedparkingslot.get(n).removeBicycle();
				this.slotisfree(occupiedparkingslot.get(n));
				igotabicycle = true;
				return b;
				}
				
		}
		System.out.println("No bicycle available ! ");
		return null;
			
	}
	
	public String toString() {
		return "The station has " + freeparkingslot.size() + " free slot(s) " + freeparkingslot.toString()+ " and " + occupiedparkingslot.size() 
		+ " occupied slot(s)" + occupiedparkingslot.toString(); 
	}
	
}
