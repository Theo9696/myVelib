package myVelib;

import java.util.Scanner;

public class Playground {
	
	public static void main(String[] args)  throws AskPlanningRideImpossibleException {
		Simulation simu = new Simulation(2,5,50);
		System.out.println(simu);
		newUser(simu, new User("Paul",0, new WithoutSubscription(),15,35));
		
		newRide(simu,0, 17, 53, "Electrical", new FastestPath());		
		newRide(simu, 2, 5, 3, "Electrical", new ShortestPath());
		takeABicycle(0, , bicycleType);
		newRide(simu,5, 9, 41, "Electrical", new ShortestPath());
		newRide(simu,3, 15, 43, "Electrical", new ShortestPath());
		
		System.out.println(simu);
		
		
		
		/*		
		ComputingRide computingRide = new ComputingRide(mika, stations, 10, 10);
		System.out.println(computingRide);
		System.out.println(computingRide.computeWay());
		*/
	}
	
	public static void newRide(Simulation simu, int userID, double latitude, double longitude, String bicycleType, RidePreferences pref) throws AskPlanningRideImpossibleException {
		try {
			simu.askNewRide(simu.getUsers().get(userID), latitude, longitude, bicycleType, pref);
		} catch (IndexOutOfBoundsException e ) {
			System.err.println(e);
			System.err.println("You tried to enter a user ID that is not yet registered in the simulation");
		}
	}
	
	public static void newUser(Simulation simu, User user) {
		simu.addnewUser(user);
	}
	
	public static void takeABicycle(Simulation simu,int userID, int stationID, String bicycleType) throws StationOfflineException, StationEmptyException {
		try {
			if (simu.getStations().get(stationID).hasStationBicycle(bicycleType)) {
				Bicycle b = simu.getStations().get(stationID).needBicycle();
				simu.getUsers().get(userID).getActualRide().addBicycle(b);
			} else {
				System.out.println("This station doesn't have the type of bicycle you wish !");
			}
		}
		catch (NullPointerException e) {
			System.err.println("This station or this user is not registered in this simulation");
			
		}
	}

}
