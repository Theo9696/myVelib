package myVelib;

import Exceptions.AskPlanningRideImpossibleException;
import Exceptions.StationEmptyException;
import Exceptions.StationFullException;
import Exceptions.StationOfflineException;
import Exceptions.ParkingSlotFullException;
import Exceptions.ComputingRideImpossibleException;

public class Playground {
	
	public static void main(String[] args)  throws AskPlanningRideImpossibleException, StationOfflineException, StationEmptyException, StationFullException {
		
		// Une simulation avec des stations et des utilisateurs est utilisable...
		/*Simulation simu = new Simulation(5,10,20);
		show(simu);*/
		
		/*usercase1 */
		//userCase1SettingofmyVelib(5) ; 
		
		/*usercase2 :*/
		userCase2RentalOfABicycle(simu,false) ;
		
		/*usercase3 :*/ 
		userCase3SimulationOfAPlanningRide(simu) ;
		
		/*user case 4*/
		userCase4BigExample(simu, false) ;
	}
	
		
		
	
	public static void show(Simulation simu) {
		System.out.println(simu);
	}
	
	/*
	 * A first user case very simple creating a simulation with @numberOfStations stations, some users...
	 */
	public static void userCase1SettingofmyVelib(Integer numberOfStations) {
		
		// Try to have a coherent number of Users and map dimensions according to the number of stations.
		Simulation simu = new Simulation(numberOfStations, numberOfStations*3, numberOfStations*2);
		show(simu);
		
	}
	
	/*
	 * A second user case ! A user take a bicycle in the first station at the time 0 and returns it at the station 3 2.2 hours later
	 * He has not asked for a planning ride! Put a true value to show details to follow the evolution of stations and the user ...
	 */
	public static void userCase2RentalOfABicycle(Simulation simu, boolean showdetails) throws StationOfflineException, StationEmptyException, StationFullException {
		
		// Creation of a simulation with one user
		//Simulation simu = new Simulation(5, 1, 10);
		
		if (showdetails) {
			show(simu);
		}
		
		// The user 0 take a electrical bicycle in the first station at the time 0
		simu.takeABicycle(0, 1, "Mechanical", 0);
		if (showdetails) {
			show(simu);
		}
		// The user 0 return his bicycle in the third station at the time 2.2(hours)
		simu.returnABicycle(0, 3, 2.2);
		
		
		if (showdetails) {
			show(simu);
		}
		
	}
	/*
	 * This user case :
	 * The user 0 ask for a ride planning to go on (5,5), the fastest way with an electrical bicycle
	 * The user took this bicycle in this station
	 * The destination station becomes offline
	 * The user receive a notification
	 */
	public static void userCase3SimulationOfAPlanningRide(Simulation simu) throws AskPlanningRideImpossibleException, StationOfflineException, StationEmptyException {
		//Simulation simu = new Simulation(5,10,10);
		
		// The user 0 ask for a ride planning to go on (5,5), the fastest way with an electrical bicycle
		simu.getUsers().get(0).askNewRide(5, 5, "Electrical", new FastestPath(), simu.getStations());
		
		simu.takeABicycleInTheStationSource(0, "Electrical", 0);
		
		simu.getUsers().get(0).getActualRide().getStationDestination().becomeOffline();
		
	}
	
	
	
	
	
	/*
	 * A user case describing the fonctionning of the algorithm. Fifteen users asking for a ride, seven taking a bicycle, a few returning and finally statistics of stations
	 */
	public static void userCase4BigExample(Simulation simu, boolean showdetails) throws AskPlanningRideImpossibleException, StationOfflineException, StationEmptyException, StationFullException {
		
		// Creation of a simulation with five stations, fifteen users and a map of 20x20
		//Simulation simu = new Simulation(5,15,20);
		if (showdetails) {
			show(simu);
		}
		
		// Creation of random destinations and preferences of bicycles
		double [] simudestination = new double[simu.getUsers().size()];
		double [] simudestination2 = new double[simu.getUsers().size()];
		String [] simupreference = new String[simu.getUsers().size()];
		{for (int k = 0; k<simu.getUsers().size(); k++){
			double proba = (Math.random()*20);
			double proba2 = (Math.random()*20);
			double proba3 = Math.random();
			simudestination[k] = proba;
			simudestination2[k] = proba2;
			
			if (proba3<0.3) {
				simupreference[k] = "Electrical";
			} else {
				simupreference[k] = "Mechanical";
			}
	
			
		}}
		
		
		// Every user ask for a ride
		{for (int k1 =0; k1<simu.getUsers().size(); k1++) {
			simu.newRide(k1, simudestination[k1], simudestination2[k1], simupreference[k1], new FastestPath());
		}}
		
		if (showdetails) {
			show(simu);
		}
		
		//A half of users ask for a bike in the station source of their rides
		{for (int k1 =0; k1<simu.getUsers().size(); k1=k1+2) {
			simu.takeABicycleInTheStationSource(k1, simupreference[k1], 0);
		}}
		if (showdetails) {
			show(simu);
		}
		
		// A quarter give back their bicycles
		{for (int k1 =0; k1<simu.getUsers().size(); k1=k1+4) {
			simu.returnABicycleInTheStationDestination(k1, 5);
		}}		
		if (showdetails) {
			show(simu);
		}
		
		simu.getMostUsedStations();
	}
	
	
}
